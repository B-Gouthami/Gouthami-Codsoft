import math

# Constants
HUMAN = 'O'
AI = 'X'
EMPTY = ' '

# Initialize the 3x3 board
def init_board():
    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]

# Function to print the board
def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 5)

# Function to check for a winner
def check_winner(board):
    # Check rows, columns, and diagonals
    for row in board:
        if row[0] == row[1] == row[2] != EMPTY:
            return row[0]

    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != EMPTY:
            return board[0][col]

    if board[0][0] == board[1][1] == board[2][2] != EMPTY:
        return board[0][0]

    if board[0][2] == board[1][1] == board[2][0] != EMPTY:
        return board[0][2]

    return None

# Function to check if the game is a draw
def is_draw(board):
    return all(cell != EMPTY for row in board for cell in row)

# Minimax function to calculate the best move
def minimax(board, depth, is_maximizing, alpha=-math.inf, beta=math.inf):
    winner = check_winner(board)
    if winner == AI:
        return 1
    elif winner == HUMAN:
        return -1
    elif is_draw(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = AI
                    score = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = EMPTY
                    best_score = max(score, best_score)
                    alpha = max(alpha, best_score)
                    if beta <= alpha:  # Alpha-Beta Pruning
                        break
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = HUMAN
                    score = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = EMPTY
                    best_score = min(score, best_score)
                    beta = min(beta, best_score)
                    if beta <= alpha:  # Alpha-Beta Pruning
                        break
        return best_score

# Function to find the best move for the AI
def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = AI
                score = minimax(board, 0, False)
                board[i][j] = EMPTY
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Function to handle the player's move
def player_move(board):
    while True:
        try:
            row = int(input("Enter row (0, 1, 2): "))
            col = int(input("Enter col (0, 1, 2): "))
            if board[row][col] == EMPTY:
                board[row][col] = HUMAN
                break
            else:
                print("Cell is not empty! Try again.")
        except (ValueError, IndexError):
            print("Invalid input! Enter numbers 0, 1, or 2.")

# Main game loop
def play_game():
    board = init_board()
    print("Tic-Tac-Toe AI vs Human!")
    print_board(board)

    while True:
        # Human's turn
        player_move(board)
        print_board(board)
        
        if check_winner(board) == HUMAN:
            print("You win!")
            break
        if is_draw(board):
            print("It's a draw!")
            break

        # AI's turn
        print("AI's turn:")
        move = best_move(board)
        board[move[0]][move[1]] = AI
        print_board(board)

        if check_winner(board) == AI:
            print("AI wins!")
            break
        if is_draw(board):
            print("It's a draw!")
            break

# Start the game
if __name__ == "__main__":
    play_game()

